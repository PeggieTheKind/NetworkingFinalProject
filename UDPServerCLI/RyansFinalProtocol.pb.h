// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RyansFinalProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RyansFinalProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RyansFinalProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RyansFinalProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RyansFinalProtocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RyansFinalProtocol_2eproto;
namespace tutorial {
class Bullet;
struct BulletDefaultTypeInternal;
extern BulletDefaultTypeInternal _Bullet_default_instance_;
class GameScene;
struct GameSceneDefaultTypeInternal;
extern GameSceneDefaultTypeInternal _GameScene_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class UserInput;
struct UserInputDefaultTypeInternal;
extern UserInputDefaultTypeInternal _UserInput_default_instance_;
class quat;
struct quatDefaultTypeInternal;
extern quatDefaultTypeInternal _quat_default_instance_;
class v3;
struct v3DefaultTypeInternal;
extern v3DefaultTypeInternal _v3_default_instance_;
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> ::tutorial::Bullet* Arena::CreateMaybeMessage<::tutorial::Bullet>(Arena*);
template<> ::tutorial::GameScene* Arena::CreateMaybeMessage<::tutorial::GameScene>(Arena*);
template<> ::tutorial::Player* Arena::CreateMaybeMessage<::tutorial::Player>(Arena*);
template<> ::tutorial::UserInput* Arena::CreateMaybeMessage<::tutorial::UserInput>(Arena*);
template<> ::tutorial::quat* Arena::CreateMaybeMessage<::tutorial::quat>(Arena*);
template<> ::tutorial::v3* Arena::CreateMaybeMessage<::tutorial::v3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tutorial {

// ===================================================================

class v3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.v3) */ {
 public:
  inline v3() : v3(nullptr) {}
  ~v3() override;
  explicit constexpr v3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  v3(const v3& from);
  v3(v3&& from) noexcept
    : v3() {
    *this = ::std::move(from);
  }

  inline v3& operator=(const v3& from) {
    CopyFrom(from);
    return *this;
  }
  inline v3& operator=(v3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const v3& default_instance() {
    return *internal_default_instance();
  }
  static inline const v3* internal_default_instance() {
    return reinterpret_cast<const v3*>(
               &_v3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(v3& a, v3& b) {
    a.Swap(&b);
  }
  inline void Swap(v3* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(v3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline v3* New() const final {
    return new v3();
  }

  v3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<v3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const v3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const v3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(v3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.v3";
  }
  protected:
  explicit v3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.v3)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_RyansFinalProtocol_2eproto;
};
// -------------------------------------------------------------------

class quat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.quat) */ {
 public:
  inline quat() : quat(nullptr) {}
  ~quat() override;
  explicit constexpr quat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  quat(const quat& from);
  quat(quat&& from) noexcept
    : quat() {
    *this = ::std::move(from);
  }

  inline quat& operator=(const quat& from) {
    CopyFrom(from);
    return *this;
  }
  inline quat& operator=(quat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const quat& default_instance() {
    return *internal_default_instance();
  }
  static inline const quat* internal_default_instance() {
    return reinterpret_cast<const quat*>(
               &_quat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(quat& a, quat& b) {
    a.Swap(&b);
  }
  inline void Swap(quat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(quat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline quat* New() const final {
    return new quat();
  }

  quat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<quat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const quat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const quat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(quat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.quat";
  }
  protected:
  explicit quat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // required float w = 4;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.quat)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float w_;
  friend struct ::TableStruct_RyansFinalProtocol_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return new Player();
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Player& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kStateFieldNumber = 1,
  };
  // required .tutorial.v3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::tutorial::v3& position() const;
  PROTOBUF_MUST_USE_RESULT ::tutorial::v3* release_position();
  ::tutorial::v3* mutable_position();
  void set_allocated_position(::tutorial::v3* position);
  private:
  const ::tutorial::v3& _internal_position() const;
  ::tutorial::v3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::tutorial::v3* position);
  ::tutorial::v3* unsafe_arena_release_position();

  // required .tutorial.v3 velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::tutorial::v3& velocity() const;
  PROTOBUF_MUST_USE_RESULT ::tutorial::v3* release_velocity();
  ::tutorial::v3* mutable_velocity();
  void set_allocated_velocity(::tutorial::v3* velocity);
  private:
  const ::tutorial::v3& _internal_velocity() const;
  ::tutorial::v3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::tutorial::v3* velocity);
  ::tutorial::v3* unsafe_arena_release_velocity();

  // required .tutorial.quat orientation = 4;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::tutorial::quat& orientation() const;
  PROTOBUF_MUST_USE_RESULT ::tutorial::quat* release_orientation();
  ::tutorial::quat* mutable_orientation();
  void set_allocated_orientation(::tutorial::quat* orientation);
  private:
  const ::tutorial::quat& _internal_orientation() const;
  ::tutorial::quat* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::tutorial::quat* orientation);
  ::tutorial::quat* unsafe_arena_release_orientation();

  // required int32 state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.Player)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::tutorial::v3* position_;
  ::tutorial::v3* velocity_;
  ::tutorial::quat* orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  friend struct ::TableStruct_RyansFinalProtocol_2eproto;
};
// -------------------------------------------------------------------

class Bullet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Bullet) */ {
 public:
  inline Bullet() : Bullet(nullptr) {}
  ~Bullet() override;
  explicit constexpr Bullet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bullet(const Bullet& from);
  Bullet(Bullet&& from) noexcept
    : Bullet() {
    *this = ::std::move(from);
  }

  inline Bullet& operator=(const Bullet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bullet& operator=(Bullet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bullet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bullet* internal_default_instance() {
    return reinterpret_cast<const Bullet*>(
               &_Bullet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Bullet& a, Bullet& b) {
    a.Swap(&b);
  }
  inline void Swap(Bullet* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bullet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bullet* New() const final {
    return new Bullet();
  }

  Bullet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bullet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bullet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Bullet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bullet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Bullet";
  }
  protected:
  explicit Bullet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kStateFieldNumber = 1,
  };
  // required .tutorial.v3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::tutorial::v3& position() const;
  PROTOBUF_MUST_USE_RESULT ::tutorial::v3* release_position();
  ::tutorial::v3* mutable_position();
  void set_allocated_position(::tutorial::v3* position);
  private:
  const ::tutorial::v3& _internal_position() const;
  ::tutorial::v3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::tutorial::v3* position);
  ::tutorial::v3* unsafe_arena_release_position();

  // required .tutorial.v3 velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::tutorial::v3& velocity() const;
  PROTOBUF_MUST_USE_RESULT ::tutorial::v3* release_velocity();
  ::tutorial::v3* mutable_velocity();
  void set_allocated_velocity(::tutorial::v3* velocity);
  private:
  const ::tutorial::v3& _internal_velocity() const;
  ::tutorial::v3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::tutorial::v3* velocity);
  ::tutorial::v3* unsafe_arena_release_velocity();

  // required int32 state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.Bullet)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::tutorial::v3* position_;
  ::tutorial::v3* velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  friend struct ::TableStruct_RyansFinalProtocol_2eproto;
};
// -------------------------------------------------------------------

class UserInput final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.UserInput) */ {
 public:
  inline UserInput() : UserInput(nullptr) {}
  ~UserInput() override;
  explicit constexpr UserInput(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInput(const UserInput& from);
  UserInput(UserInput&& from) noexcept
    : UserInput() {
    *this = ::std::move(from);
  }

  inline UserInput& operator=(const UserInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInput& operator=(UserInput&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInput* internal_default_instance() {
    return reinterpret_cast<const UserInput*>(
               &_UserInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserInput& a, UserInput& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInput* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInput* New() const final {
    return new UserInput();
  }

  UserInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInput>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInput& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserInput& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.UserInput";
  }
  protected:
  explicit UserInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kInputFieldNumber = 2,
  };
  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 input = 2;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  ::PROTOBUF_NAMESPACE_ID::int32 input() const;
  void set_input(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input() const;
  void _internal_set_input(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.UserInput)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_;
  friend struct ::TableStruct_RyansFinalProtocol_2eproto;
};
// -------------------------------------------------------------------

class GameScene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.GameScene) */ {
 public:
  inline GameScene() : GameScene(nullptr) {}
  ~GameScene() override;
  explicit constexpr GameScene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameScene(const GameScene& from);
  GameScene(GameScene&& from) noexcept
    : GameScene() {
    *this = ::std::move(from);
  }

  inline GameScene& operator=(const GameScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameScene& operator=(GameScene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameScene& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameScene* internal_default_instance() {
    return reinterpret_cast<const GameScene*>(
               &_GameScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameScene& a, GameScene& b) {
    a.Swap(&b);
  }
  inline void Swap(GameScene* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameScene* New() const final {
    return new GameScene();
  }

  GameScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameScene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameScene& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameScene& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameScene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.GameScene";
  }
  protected:
  explicit GameScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kBulletsFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .tutorial.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::tutorial::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Player >*
      mutable_players();
  private:
  const ::tutorial::Player& _internal_players(int index) const;
  ::tutorial::Player* _internal_add_players();
  public:
  const ::tutorial::Player& players(int index) const;
  ::tutorial::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Player >&
      players() const;

  // repeated .tutorial.Bullet bullets = 3;
  int bullets_size() const;
  private:
  int _internal_bullets_size() const;
  public:
  void clear_bullets();
  ::tutorial::Bullet* mutable_bullets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Bullet >*
      mutable_bullets();
  private:
  const ::tutorial::Bullet& _internal_bullets(int index) const;
  ::tutorial::Bullet* _internal_add_bullets();
  public:
  const ::tutorial::Bullet& bullets(int index) const;
  ::tutorial::Bullet* add_bullets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Bullet >&
      bullets() const;

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.GameScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Player > players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Bullet > bullets_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_RyansFinalProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// v3

// required float x = 1;
inline bool v3::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool v3::has_x() const {
  return _internal_has_x();
}
inline void v3::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float v3::_internal_x() const {
  return x_;
}
inline float v3::x() const {
  // @@protoc_insertion_point(field_get:tutorial.v3.x)
  return _internal_x();
}
inline void v3::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void v3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:tutorial.v3.x)
}

// required float y = 2;
inline bool v3::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool v3::has_y() const {
  return _internal_has_y();
}
inline void v3::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float v3::_internal_y() const {
  return y_;
}
inline float v3::y() const {
  // @@protoc_insertion_point(field_get:tutorial.v3.y)
  return _internal_y();
}
inline void v3::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void v3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:tutorial.v3.y)
}

// required float z = 3;
inline bool v3::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool v3::has_z() const {
  return _internal_has_z();
}
inline void v3::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float v3::_internal_z() const {
  return z_;
}
inline float v3::z() const {
  // @@protoc_insertion_point(field_get:tutorial.v3.z)
  return _internal_z();
}
inline void v3::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void v3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:tutorial.v3.z)
}

// -------------------------------------------------------------------

// quat

// required float x = 1;
inline bool quat::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool quat::has_x() const {
  return _internal_has_x();
}
inline void quat::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float quat::_internal_x() const {
  return x_;
}
inline float quat::x() const {
  // @@protoc_insertion_point(field_get:tutorial.quat.x)
  return _internal_x();
}
inline void quat::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void quat::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:tutorial.quat.x)
}

// required float y = 2;
inline bool quat::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool quat::has_y() const {
  return _internal_has_y();
}
inline void quat::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float quat::_internal_y() const {
  return y_;
}
inline float quat::y() const {
  // @@protoc_insertion_point(field_get:tutorial.quat.y)
  return _internal_y();
}
inline void quat::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void quat::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:tutorial.quat.y)
}

// required float z = 3;
inline bool quat::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool quat::has_z() const {
  return _internal_has_z();
}
inline void quat::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float quat::_internal_z() const {
  return z_;
}
inline float quat::z() const {
  // @@protoc_insertion_point(field_get:tutorial.quat.z)
  return _internal_z();
}
inline void quat::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void quat::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:tutorial.quat.z)
}

// required float w = 4;
inline bool quat::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool quat::has_w() const {
  return _internal_has_w();
}
inline void quat::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float quat::_internal_w() const {
  return w_;
}
inline float quat::w() const {
  // @@protoc_insertion_point(field_get:tutorial.quat.w)
  return _internal_w();
}
inline void quat::_internal_set_w(float value) {
  _has_bits_[0] |= 0x00000008u;
  w_ = value;
}
inline void quat::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:tutorial.quat.w)
}

// -------------------------------------------------------------------

// Player

// required int32 state = 1;
inline bool Player::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Player::has_state() const {
  return _internal_has_state();
}
inline void Player::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::state() const {
  // @@protoc_insertion_point(field_get:tutorial.Player.state)
  return _internal_state();
}
inline void Player::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  state_ = value;
}
inline void Player::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:tutorial.Player.state)
}

// required .tutorial.v3 position = 2;
inline bool Player::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool Player::has_position() const {
  return _internal_has_position();
}
inline void Player::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::tutorial::v3& Player::_internal_position() const {
  const ::tutorial::v3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::tutorial::v3&>(
      ::tutorial::_v3_default_instance_);
}
inline const ::tutorial::v3& Player::position() const {
  // @@protoc_insertion_point(field_get:tutorial.Player.position)
  return _internal_position();
}
inline void Player::unsafe_arena_set_allocated_position(
    ::tutorial::v3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.Player.position)
}
inline ::tutorial::v3* Player::release_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::tutorial::v3* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tutorial::v3* Player::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:tutorial.Player.position)
  _has_bits_[0] &= ~0x00000001u;
  ::tutorial::v3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::tutorial::v3* Player::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::v3>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::tutorial::v3* Player::mutable_position() {
  ::tutorial::v3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:tutorial.Player.position)
  return _msg;
}
inline void Player::set_allocated_position(::tutorial::v3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tutorial::v3>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:tutorial.Player.position)
}

// required .tutorial.v3 velocity = 3;
inline bool Player::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || velocity_ != nullptr);
  return value;
}
inline bool Player::has_velocity() const {
  return _internal_has_velocity();
}
inline void Player::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::tutorial::v3& Player::_internal_velocity() const {
  const ::tutorial::v3* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::tutorial::v3&>(
      ::tutorial::_v3_default_instance_);
}
inline const ::tutorial::v3& Player::velocity() const {
  // @@protoc_insertion_point(field_get:tutorial.Player.velocity)
  return _internal_velocity();
}
inline void Player::unsafe_arena_set_allocated_velocity(
    ::tutorial::v3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.Player.velocity)
}
inline ::tutorial::v3* Player::release_velocity() {
  _has_bits_[0] &= ~0x00000002u;
  ::tutorial::v3* temp = velocity_;
  velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tutorial::v3* Player::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:tutorial.Player.velocity)
  _has_bits_[0] &= ~0x00000002u;
  ::tutorial::v3* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::tutorial::v3* Player::_internal_mutable_velocity() {
  _has_bits_[0] |= 0x00000002u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::v3>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::tutorial::v3* Player::mutable_velocity() {
  ::tutorial::v3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:tutorial.Player.velocity)
  return _msg;
}
inline void Player::set_allocated_velocity(::tutorial::v3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tutorial::v3>::GetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:tutorial.Player.velocity)
}

// required .tutorial.quat orientation = 4;
inline bool Player::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || orientation_ != nullptr);
  return value;
}
inline bool Player::has_orientation() const {
  return _internal_has_orientation();
}
inline void Player::clear_orientation() {
  if (orientation_ != nullptr) orientation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::tutorial::quat& Player::_internal_orientation() const {
  const ::tutorial::quat* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::tutorial::quat&>(
      ::tutorial::_quat_default_instance_);
}
inline const ::tutorial::quat& Player::orientation() const {
  // @@protoc_insertion_point(field_get:tutorial.Player.orientation)
  return _internal_orientation();
}
inline void Player::unsafe_arena_set_allocated_orientation(
    ::tutorial::quat* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.Player.orientation)
}
inline ::tutorial::quat* Player::release_orientation() {
  _has_bits_[0] &= ~0x00000004u;
  ::tutorial::quat* temp = orientation_;
  orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tutorial::quat* Player::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:tutorial.Player.orientation)
  _has_bits_[0] &= ~0x00000004u;
  ::tutorial::quat* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::tutorial::quat* Player::_internal_mutable_orientation() {
  _has_bits_[0] |= 0x00000004u;
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::quat>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::tutorial::quat* Player::mutable_orientation() {
  ::tutorial::quat* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:tutorial.Player.orientation)
  return _msg;
}
inline void Player::set_allocated_orientation(::tutorial::quat* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tutorial::quat>::GetOwningArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:tutorial.Player.orientation)
}

// -------------------------------------------------------------------

// Bullet

// required int32 state = 1;
inline bool Bullet::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Bullet::has_state() const {
  return _internal_has_state();
}
inline void Bullet::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bullet::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bullet::state() const {
  // @@protoc_insertion_point(field_get:tutorial.Bullet.state)
  return _internal_state();
}
inline void Bullet::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void Bullet::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:tutorial.Bullet.state)
}

// required .tutorial.v3 position = 2;
inline bool Bullet::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool Bullet::has_position() const {
  return _internal_has_position();
}
inline void Bullet::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::tutorial::v3& Bullet::_internal_position() const {
  const ::tutorial::v3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::tutorial::v3&>(
      ::tutorial::_v3_default_instance_);
}
inline const ::tutorial::v3& Bullet::position() const {
  // @@protoc_insertion_point(field_get:tutorial.Bullet.position)
  return _internal_position();
}
inline void Bullet::unsafe_arena_set_allocated_position(
    ::tutorial::v3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.Bullet.position)
}
inline ::tutorial::v3* Bullet::release_position() {
  _has_bits_[0] &= ~0x00000001u;
  ::tutorial::v3* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tutorial::v3* Bullet::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:tutorial.Bullet.position)
  _has_bits_[0] &= ~0x00000001u;
  ::tutorial::v3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::tutorial::v3* Bullet::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::v3>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::tutorial::v3* Bullet::mutable_position() {
  ::tutorial::v3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:tutorial.Bullet.position)
  return _msg;
}
inline void Bullet::set_allocated_position(::tutorial::v3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tutorial::v3>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:tutorial.Bullet.position)
}

// required .tutorial.v3 velocity = 3;
inline bool Bullet::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || velocity_ != nullptr);
  return value;
}
inline bool Bullet::has_velocity() const {
  return _internal_has_velocity();
}
inline void Bullet::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::tutorial::v3& Bullet::_internal_velocity() const {
  const ::tutorial::v3* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::tutorial::v3&>(
      ::tutorial::_v3_default_instance_);
}
inline const ::tutorial::v3& Bullet::velocity() const {
  // @@protoc_insertion_point(field_get:tutorial.Bullet.velocity)
  return _internal_velocity();
}
inline void Bullet::unsafe_arena_set_allocated_velocity(
    ::tutorial::v3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.Bullet.velocity)
}
inline ::tutorial::v3* Bullet::release_velocity() {
  _has_bits_[0] &= ~0x00000002u;
  ::tutorial::v3* temp = velocity_;
  velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tutorial::v3* Bullet::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:tutorial.Bullet.velocity)
  _has_bits_[0] &= ~0x00000002u;
  ::tutorial::v3* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::tutorial::v3* Bullet::_internal_mutable_velocity() {
  _has_bits_[0] |= 0x00000002u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::v3>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::tutorial::v3* Bullet::mutable_velocity() {
  ::tutorial::v3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:tutorial.Bullet.velocity)
  return _msg;
}
inline void Bullet::set_allocated_velocity(::tutorial::v3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tutorial::v3>::GetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:tutorial.Bullet.velocity)
}

// -------------------------------------------------------------------

// UserInput

// required int32 id = 1;
inline bool UserInput::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserInput::has_id() const {
  return _internal_has_id();
}
inline void UserInput::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInput::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInput::id() const {
  // @@protoc_insertion_point(field_get:tutorial.UserInput.id)
  return _internal_id();
}
inline void UserInput::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void UserInput::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tutorial.UserInput.id)
}

// required int32 input = 2;
inline bool UserInput::_internal_has_input() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserInput::has_input() const {
  return _internal_has_input();
}
inline void UserInput::clear_input() {
  input_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInput::_internal_input() const {
  return input_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInput::input() const {
  // @@protoc_insertion_point(field_get:tutorial.UserInput.input)
  return _internal_input();
}
inline void UserInput::_internal_set_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  input_ = value;
}
inline void UserInput::set_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input(value);
  // @@protoc_insertion_point(field_set:tutorial.UserInput.input)
}

// -------------------------------------------------------------------

// GameScene

// required int32 id = 1;
inline bool GameScene::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameScene::has_id() const {
  return _internal_has_id();
}
inline void GameScene::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameScene::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameScene::id() const {
  // @@protoc_insertion_point(field_get:tutorial.GameScene.id)
  return _internal_id();
}
inline void GameScene::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void GameScene::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tutorial.GameScene.id)
}

// repeated .tutorial.Player players = 2;
inline int GameScene::_internal_players_size() const {
  return players_.size();
}
inline int GameScene::players_size() const {
  return _internal_players_size();
}
inline void GameScene::clear_players() {
  players_.Clear();
}
inline ::tutorial::Player* GameScene::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.GameScene.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Player >*
GameScene::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.GameScene.players)
  return &players_;
}
inline const ::tutorial::Player& GameScene::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::tutorial::Player& GameScene::players(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.GameScene.players)
  return _internal_players(index);
}
inline ::tutorial::Player* GameScene::_internal_add_players() {
  return players_.Add();
}
inline ::tutorial::Player* GameScene::add_players() {
  ::tutorial::Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:tutorial.GameScene.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Player >&
GameScene::players() const {
  // @@protoc_insertion_point(field_list:tutorial.GameScene.players)
  return players_;
}

// repeated .tutorial.Bullet bullets = 3;
inline int GameScene::_internal_bullets_size() const {
  return bullets_.size();
}
inline int GameScene::bullets_size() const {
  return _internal_bullets_size();
}
inline void GameScene::clear_bullets() {
  bullets_.Clear();
}
inline ::tutorial::Bullet* GameScene::mutable_bullets(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.GameScene.bullets)
  return bullets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Bullet >*
GameScene::mutable_bullets() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.GameScene.bullets)
  return &bullets_;
}
inline const ::tutorial::Bullet& GameScene::_internal_bullets(int index) const {
  return bullets_.Get(index);
}
inline const ::tutorial::Bullet& GameScene::bullets(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.GameScene.bullets)
  return _internal_bullets(index);
}
inline ::tutorial::Bullet* GameScene::_internal_add_bullets() {
  return bullets_.Add();
}
inline ::tutorial::Bullet* GameScene::add_bullets() {
  ::tutorial::Bullet* _add = _internal_add_bullets();
  // @@protoc_insertion_point(field_add:tutorial.GameScene.bullets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::Bullet >&
GameScene::bullets() const {
  // @@protoc_insertion_point(field_list:tutorial.GameScene.bullets)
  return bullets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RyansFinalProtocol_2eproto
